service: ${env:APP_NAME, 'tshExampleApp'}
useDotenv: true
plugins:
  - serverless-step-functions-local
  - serverless-step-functions
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-dynamodb
  - serverless-offline

package:
  individually: true

custom:
  environment:
    DYNAMODB_CURRENCY_TABLE: ${env:APP_NAME, 'tshExampleApp'}-${env:DYNAMODB_CURRENCY_TABLE}-${opt:stage, 'local'}
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET_ID_1}
      - ${env:SUBNET_ID_2}
  webpack:
    webpackConfig: "webpack.config.js"
    packager: "npm"
  stepFunctionsLocal:
    externalInstance: true
    accountId: 101010101010
    region: us-east-1
    stepFunctionsEndpoint: http://127.0.0.1:8083
    TaskResourceMapping:
      # PLOP_ADD_WORKFLOW_STEP_LOCAL_STEP
  dynamodb:
    stages:
      - local
    start:
      docker: true
      port: 8005
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
  apiKeys:
    local:
      - name: ${env:APP_NAME, 'tshExampleApp'}-local-key
        value: ${env:API_KEY}
    dev:
      - name: ${env:APP_NAME, 'tshExampleApp'}-dev-key

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_LAMBDAS_REGION, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30
  logRetentionInDays: 30
  environment:
    APP_NAME: ${env:APP_NAME, 'tshExampleApp'}
    AWS_LAMBDAS_REGION: ${env:AWS_LAMBDAS_REGION, 'eu-west-1'}
    API_KEY: ${env:API_KEY}
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:DetachNetworkInterface
        Resource: "*"
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
          - lambda:InvokeAsync
          - states:StartExecution
        Resource:
          - "*"
  apiGateway:
    apiKeys: ${self:custom.apiKeys.${opt:stage, 'local'}}

functions:
  - ${file(functions/health-check/function.yml)}
  - ${file(functions/rates-importer/function.yml)}
  - ${file(functions/get-rates/function.yml)}
  - ${file(functions/start-transaction/function.yml)}
  - ${file(functions/check-transaction-status/function.yml)}
  # PLOP_ADD_LAMBDA

stepFunctions:
  stateMachines:
  # PLOP_ADD_WORKFLOW_STATE_MACHINE

resources:
  Outputs:
    # PLOP_ADD_WORKFLOW_RESOURCE
  Resources:
    currencyTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${env:APP_NAME, 'tshExampleApp'}-${env:DYNAMODB_CURRENCY_TABLE}-${opt:stage, 'local'}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST